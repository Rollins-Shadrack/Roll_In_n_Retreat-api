// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model hold {
  id                String        @id @default(uuid())
  email             String        @unique(map: "hold _email_unique") @db.VarChar(255)
  token             Json
  entity            accounttype?
  registration_id   String        @unique
  process_complete  Boolean       @default(false)
  account_data      Json
  account_status    accountstatus @default(pending)
  registration_date DateTime?     @db.Date
  expiration_date   DateTime?     @db.Date
  link              Json
  sign_up           sign_up?
  deleted_at        DateTime?     @db.Date
  created_at        DateTime      @default(now()) @db.Timestamptz(6)
  updated_at        DateTime      @default(now()) @db.Timestamptz(6)
}

model account {
  id                String    @id @default(uuid())
  email             String    @unique(map: "account_email_unique") @db.VarChar(255)
  password          String    @db.VarChar(255)
  is_social_login   Boolean   @default(false)
  is_active         Boolean   @default(false)
  is_verified       Boolean   @default(false)
  is_email_verified Boolean   @default(false)
  account_type_id   String?
  refresh_token     String[]
  entity            String
  deleted_at        DateTime? @db.Date
  created_at        DateTime  @default(now()) @db.Timestamptz(6)
  updated_at        DateTime  @default(now()) @db.Timestamptz(6)
  partner           partner[]
  staff             staff[]
  user              user[]
  sign_up           sign_up?
}

model sign_up {
  id                      String    @id @default(uuid())
  account_id              String?   @unique
  holding_id              String?   @unique
  process_completed       Boolean   @default(false)
  sign_up_agent           Json?
  email                   String    @unique @db.VarChar(255)
  confirmation_agent      Json?
  completion_agent        Json?
  account_is_active       Boolean   @default(false)
  sign_up_ip_address      String?   @db.VarChar(255)
  confirmation_ip_address String?   @db.VarChar(255)
  completion_ip_address   String?   @db.VarChar(255)
  deleted_at              DateTime? @db.Date
  created_at              DateTime  @default(now()) @db.Timestamptz(6)
  updated_at              DateTime  @default(now()) @db.Timestamptz(6)
  account                 account?  @relation(fields: [account_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  hold                    hold?     @relation(fields: [holding_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id            String         @id @default(uuid())
  first_name    String         @db.VarChar(255)
  last_name     String         @db.VarChar(255)
  gender        String?
  mobile_number String         @db.VarChar(255)
  user_role_id  String?        @unique
  user_address  String?        @unique
  entity_type   String         @default("user") @db.VarChar(255)
  deleted_at    DateTime?      @db.Date
  created_at    DateTime       @default(now()) @db.Timestamptz(6)
  updated_at    DateTime       @default(now()) @db.Timestamptz(6)
  booking       booking[]
  user_profile  user_profile[]
  account       account        @relation(fields: [account_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  account_id    String         @unique
}

model partner {
  id         String  @id @default(uuid())
  account    account @relation(fields: [account_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  account_id String  @unique
}

model staff {
  id         String  @id @default(uuid())
  account    account @relation(fields: [account_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  account_id String  @unique
}

model user_profile {
  id                       String      @id @default(uuid())
  address                  Json?
  location                 Json?
  profile_image            String?     @db.VarChar(255)
  communication_preference Json?
  favourite_hotel          Json?
  deleted_at               DateTime?   @db.Date
  created_at               DateTime    @default(now()) @db.Timestamptz(6)
  updated_at               DateTime    @default(now()) @db.Timestamptz(6)
  user                     user        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_id                  String      @unique
  preference               preference? @relation(fields: [preference_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  preference_id            String?     @unique
}

model booking {
  id              String    @id @default(uuid())
  booking_date    DateTime  @db.Date
  start_date      DateTime  @db.Timestamptz(6)
  end_date        DateTime  @db.Timestamptz(6)
  duration        Int?
  entity_type     String    @default("user") @db.VarChar(255)
  partner_id      String    @unique
  user_id         String    @unique
  room_id         String    @unique
  booking_comment String?   @db.VarChar(255)
  addon_id        String[]  @unique
  user            user      @relation(fields: [user_id], references: [id])
  deleted_at      DateTime? @db.Date
  created_at      DateTime  @default(now()) @db.Timestamptz(6)
  updated_at      DateTime  @default(now()) @db.Timestamptz(6)
}

model preference {
  id           String        @id @default(uuid())
  entity_type  entitytype?
  in_app       Json
  web          Json
  email        Json
  sms          Json
  post         Json
  data         Json?
  deleted_at   DateTime?     @db.Date
  created_at   DateTime      @default(now()) @db.Timestamptz(6)
  updated_at   DateTime      @default(now()) @db.Timestamptz(6)
  user_profile user_profile?
}

enum accounttype {
  staff
  partner
  user
  superadmin
}

enum entitytype {
  staff
  partner
  user
  superadmin
}

enum accountstatus {
  pending
  deleted
  confirmed
  suspended
}
